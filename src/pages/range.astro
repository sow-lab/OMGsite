---
import json from "../../scripts/pools_data.json";
import Layout from "../layouts/Layout.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from "astro";
import Dialog from "../components/Dialog.astro";

export interface Pool {
  name: string;
  mainImage: string;
  category: string | null;
  dimension1: string;
  dimension2: string;
  subTitle: string;
  text: string;
  sizeImage: string;
  liText: string[];
  footerLinks: { link: string; imageUrl: string }[];
}

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/pool_images/*.{jpeg,jpg,png,gif}"
);
// Function to sort objects into subarrays based on category
function sortObjectsByCategory(objects: Pool[]) {
  const sortedArrays: { [category: string]: Pool[] } = {};

  objects.forEach((object) => {
    if (object.category === null) {
      return;
    }
    if (!sortedArrays[object.category]) {
      sortedArrays[object.category] = [];
    }
    sortedArrays[object.category].push(object);
  });

  const resultArray = Object.values(sortedArrays);
  return resultArray;
}

const sortedByCategoryArray: Pool[][] = sortObjectsByCategory(json as Pool[]);
---

<Layout>
  <div class="max-w-6xl mx-auto">
    <div class="mt-10">
    <a href="#spillway" class="inline-flex items-center justify-center w-full px-6 py-3 mb-2 text-lg text-white bg-sky-950 rounded-md hover:bg-sky-800 sm:w-auto sm:mb-0">
      Spillway Pools
      </a>
    <a href="#aqua-ledge" class="inline-flex items-center justify-center w-full px-6 py-3 mb-2 text-lg text-white bg-sky-950 rounded-md hover:bg-sky-800 sm:w-auto sm:mb-0">
      Aqua-Ledge
      </a>
    <a href="#medium" class="inline-flex items-center justify-center w-full px-6 py-3 mb-2 text-lg text-white bg-sky-950 rounded-md hover:bg-sky-800 sm:w-auto sm:mb-0">
      Medium Pools
      </a>
    <a href="#medium" class="inline-flex items-center justify-center w-full px-6 py-3 mb-2 text-lg text-white bg-sky-950 rounded-md hover:bg-sky-800 sm:w-auto sm:mb-0">
      Large Pools
      </a>
      </div>
    {
      sortedByCategoryArray.map((category) => (
        <div class="my-10  px-2">
          <h2 id={category[0].category} class="scroll-mt-10 border-b pb-2 text-3xl font-semibold tracking-tight first:mt-0 capitalize mb-2">
            {category[0].category} Pools
          </h2>
          <ul class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
            {category.map(async (pool) => {
              const imageSrc =
                await images[`/src/assets/pool_images/${pool.mainImage}`]();
                const sizeImageSrc =
                await images[`/src/assets/pool_images/${pool.sizeImage}`]();

                const related = await Promise.all(pool.footerLinks.map(async (related) => {
                const image = await images[`/src/assets/pool_images/${related.imageUrl}`]();
                return { link: related.link, image: image.default };
              }));
              return (
                <li onclick={`window.${pool.name.replace(/[-\s]/g, '').toLowerCase()}.showModal(); document.body.classList.add('overflow-hidden')`})
                class="aspect-video hover:cursor-pointer group">
                    <Image
                      class="h-full w-full object-cover group-hover:brightness-75 transition-all duration-300 ease-in-out"
                      src={imageSrc.default}
                      alt="test"
                    />
                    <p class="bg-sky-950 text-white text-base text-center capitalize leading-7 py-2">
                      {pool.name} - {pool.dimension1}
                    </p>
                </li>
                <Dialog pool={pool} image={imageSrc.default} sizeImage={sizeImageSrc.default} related={related}/>
              );
            })}
          </ul>
        </div>
      ))
    }
  </div>
</Layout>
